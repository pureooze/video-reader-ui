---
layout: base.njk
title: Video Reader
---

<script>
	fetch('2023-9-10_4-17-04.csv')
            .catch(error => {
                console.error('Error:', error);
            });

	function downloadFile(content, fileName, mimeType) {

		const downloadLink = document.createElement('a');
		
		downloadLink.href = url;
		downloadLink.download = fileName;
		
		// Append download link to the DOM and trigger a click to start the download
		document.body.appendChild(downloadLink);
		downloadLink.click();
		
		// Clean up after the download is complete
		document.body.removeChild(downloadLink);
		URL.revokeObjectURL(url);
	}

	async function fetchVideos() {
		const SourceTypes = {
			File: 0,
			Playlist: 1
		};

		const url = document.getElementById('url-input').value;

		const response = await fetch('https://cukc1c929i.execute-api.us-east-2.amazonaws.com/default/videoreader?uri=' + url);
		const results = await response.json() || [];

		const resultsListElement = document.getElementById('results-list');
		resultsListElement.replaceChildren([]);

		for( let result of results.Result) {
			const container = document.createElement("tr");
			container.classList.add("result")
			const name = "asd";

			const url = document.createElement("td");
			const downloadLink = document.createElement("a");

			if (results.OutputType == SourceTypes.Playlist) {
				const blob = new Blob([result.Url], { type: "application/x-mpegURL" });
				const url = URL.createObjectURL(blob);

				downloadLink.setAttribute("href", url);
			} else if ( results.OutputType == SourceTypes.File ) {
				const blob = new Blob([result.Url], { type: "video/mp4" });
				const url = URL.createObjectURL(blob);
				downloadLink.setAttribute("href", url);
			} else {
				throw "Unexpected Output Type"
			}

			downloadLink.setAttribute("download", result.Filename);
			downloadLink.textContent = 'Download';
			url.appendChild(downloadLink);

			const codec = document.createElement("td");
			codec.innerHTML = result.Codec;

			const label = document.createElement("td");
			label.innerHTML = result.VideoQuality.Label;

			const framerate = document.createElement("td");
			framerate.innerHTML = result.VideoQuality.Framerate

			container.appendChild(url);
			container.appendChild(codec);
			container.appendChild(label);
			container.appendChild(framerate);
			resultsListElement.appendChild(container);
		}

	}
</script>

<style>
	.results-list {
		background-color: #f3f3f3
	}
</style>

<div>
	<h1 class="page-title">Video Reader</h1>
	<div class="form-and-result-container" id="form-and-result-container">
		<div class="form">
			<label for="url">Video Url:</label>
			<input type="text" name="url" id="url-input"/>
			<button onclick="fetchVideos()">Fetch</button>
		</div>
		<table class="results-list" id="results-list"></table>
	</div>
</div>